{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GET_PR","gql","StatusLabel","state","Label","color","horizontal","App","useQuery","loading","error","data","fetchMore","message","className","Container","Image","src","viewer","avatarUrl","circular","size","login","Table","celled","striped","Header","Row","HeaderCell","Body","pullRequests","edges","map","pr","Cell","node","href","repository","url","name","title","Button","onClick","variables","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","length","__typename","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd8ba578.chunk.js","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Container, Button, Table, Label, Image } from 'semantic-ui-react';\nimport './App.css';\n\nconst GET_PR = gql`\n  query Viewer($cursor: String) {\n    viewer {\n      login\n      avatarUrl\n      pullRequests(\n        first: 10\n        after: $cursor\n        orderBy: { direction: DESC, field: CREATED_AT }\n      ) {\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        edges {\n          node {\n            repository {\n              name\n              url\n            }\n            title\n            state\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction StatusLabel({ state }) {\n  switch (state) {\n    case 'OPEN':\n      return (\n        <Label color=\"green\" horizontal>\n          {state}\n        </Label>\n      );\n    case 'MERGED':\n      return (\n        <Label color=\"purple\" horizontal>\n          {state}\n        </Label>\n      );\n    case 'CLOSED':\n      return (\n        <Label color=\"red\" horizontal>\n          {state}\n        </Label>\n      );\n    default:\n      return <Label>{state}</Label>;\n  }\n}\n\nfunction App() {\n  const { loading, error, data, fetchMore } = useQuery(GET_PR);\n\n  if (loading) return null;\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <div className=\"header\">\n          <Image src={data.viewer.avatarUrl} circular size=\"small\" />\n          <p className=\"login\">{data.viewer.login}</p>\n        </div>\n        <Table celled striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Status</Table.HeaderCell>\n              <Table.HeaderCell>Repository</Table.HeaderCell>\n              <Table.HeaderCell>Pull Requests</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.viewer.pullRequests.edges.map(pr => (\n              <Table.Row>\n                <Table.Cell>{<StatusLabel state={pr.node.state} />}</Table.Cell>\n                <Table.Cell>\n                  <a href={pr.node.repository.url}>{pr.node.repository.name}</a>\n                </Table.Cell>\n                <Table.Cell>\n                  <a href={pr.node.url}>{pr.node.title}</a>\n                </Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        <div className=\"footer\">\n          <Button\n            onClick={() =>\n              fetchMore({\n                variables: {\n                  cursor: data.viewer.pullRequests.pageInfo.endCursor,\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.viewer.pullRequests.edges;\n                  const pageInfo = fetchMoreResult.viewer.pullRequests.pageInfo;\n\n                  return newEdges.length\n                    ? {\n                        viewer: {\n                          __typename: previousResult.viewer.__typename,\n                          pullRequests: {\n                            __typename:\n                              previousResult.viewer.pullRequests.__typename,\n                            edges: [\n                              ...previousResult.viewer.pullRequests.edges,\n                              ...newEdges,\n                            ],\n                            pageInfo,\n                          },\n                        },\n                      }\n                    : previousResult;\n                },\n              })\n            }\n          >\n            More...\n          </Button>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: 'Bearer 4fa506e714683c3f00da95baf4243d18f8efe8be',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}